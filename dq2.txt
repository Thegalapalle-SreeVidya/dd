#New :
def significant_shift_rag(rag_values):
    return len([rag for rag in rag_values if rag == 'Significant Shift'])

# Function to determine significant shifts for Missing Values
def significant_shift_values(shift_values):
    return len([shift for shift in shift_values if shift == 'Significant Shift'])

# Function to determine significant shifts for Maximum Values
def significant_shift_max_value(shift_percent_values):
    return len([shift for shift in shift_percent_values if shift > 0.50])
# Function to determine significant shifts for Percentile
def significant_shift_percentile(df, percentile_columns):
    return len([shift for col in percentile_columns for shift in df[col] if shift == 'Significant Shift'])

# Define the columns for percentile shifts
percentile_columns = ['P10 Shift', 'P25 Shift', 'P50 Shift', 'P75 Shift', 'P90 Shift']

# Calculate significant shifts
psi_significant_shifts = significant_shift_rag(psi_df['RAG'])
missing_value_significant_shifts = significant_shift_values(missing_df['Shift'])
max_value_significant_shifts = significant_shift_max_value(max_df['Shift %'])
percentile_significant_shifts = significant_shift_percentile(df, percentile_columns)



    # Tab 5
    with tabs[5]:
        st.header("Overview")
        percentile_columns = ['P10 Shift', 'P25 Shift', 'P50 Shift', 'P75 Shift', 'P90 Shift']
        overview_columns = ['Data Category', 'Inbound Country', 'Outbound Country', 'Period', 'Benchmark Months', 'Validation Month']
        outbound_countries = overview_df['Outbound Country'].dropna().tolist()
        row = overview_df.iloc[0]

        # Display the specified columns in a formatted way
  
        st.write(f"Data Category: {row['Data Category']}")
        st.write(f"Inbound Country: {row['Inbound Country']}")
        st.write(f"Outbound Country: {', '.join(outbound_countries)}")
        st.write(f"Period: {row['Period']}")
        st.write(f"Benchmark Months: {row['Benchmark Months']}")
        st.write(f"Validation Month: {row['Validation Month']}")
        
        st.subheader("Significant Shifts Summary")

        col1, col2, col3, col4 = st.columns(4)
    
        with col1:
            st.write(f"<div style='background-color: red; color: white; padding: 10px; text-align: center;'>PSI - {psi_significant_shifts}</div>", unsafe_allow_html=True)
            with st.expander("Attributes with significant PSI shift"):
                attributes = psi_df[psi_df['RAG'] == 'Significant Shift']['Attribute'].tolist()
                for attribute in attributes:
                    st.write(f"- {attribute}")
            
        with col2:
            st.write(f"<div style='background-color: red; color: white; padding: 10px; text-align: center;'>Missing Value - {missing_value_significant_shifts}</div>", unsafe_allow_html=True)
            with st.expander("Attributes with significant Missing Value shift"):
                attributes = missing_df[missing_df['Shift'] == 'Significant Shift']['Attribute'].tolist()
                for attribute in attributes:
                    st.write(attribute)


        with col3:
            st.write(f"<div style='background-color: red; color: white; padding: 10px; text-align: center;'>Max Value Shift % - {max_value_significant_shifts}</div>", unsafe_allow_html=True)
            with st.expander("Attributes with significant Max Value shift"):
                attributes = max_df[max_df['Shift %'] > 0.50]['Attribute'].tolist()
                for attribute in attributes:
                    st.write(f"- {attribute}")
            
            

        with col4:
            st.write(f"<div style='background-color: red; color: white; padding: 10px; text-align: center;'>Percentile Shift - {percentile_significant_shifts}</div>", unsafe_allow_html=True)
            with st.expander("Attributes with significant Percentile shift"):
                    significant_percentile_df = df[(df[percentile_columns] == 'Significant Shift').any(axis=1)]
                    attributes = significant_percentile_df['Values'].tolist()
                    for attribute in attributes:
                        st.write(f"- {attribute}")
