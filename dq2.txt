import streamlit as st
import pandas as pd
import subprocess
import os
import sys

# Function to convert month numbers to names
def get_month_name(month_number):
    months_mapping = {
        1: 'January', 2: 'February', 3: 'March', 4: 'April', 5: 'May', 6: 'June',
        7: 'July', 8: 'August', 9: 'September', 10: 'October', 11: 'November', 12: 'December'
    }
    return months_mapping.get(month_number, "")

# Function to create overview.csv
def create_overview(uploaded_file, benchmark_months, validation_month):
    # Load the input data (from the uploaded file)
    input_data = pd.read_excel(uploaded_file)  # Reading the uploaded Excel file
    
    # Get the minimum and maximum months from the 'Month' column in the input data
    min_month = input_data['Month'].min()
    max_month = input_data['Month'].max()

    # Convert the month numbers from user input to month names
    start_month = get_month_name(min_month)  # Start from the minimum month in the dataset
    end_month = get_month_name(max_month)    # End at the maximum month in the dataset

    # Formatting the period as "X months (Start - End)"
    period = f"{max_month - min_month + 1} months ({start_month} - {end_month})"

    # Formatting the benchmark months based on user input (e.g., "6 months (Jan - Jun)")
    benchmark_end_month_number = min_month + benchmark_months - 1
    benchmark_end_month = get_month_name(benchmark_end_month_number)
    benchmark_period = f"{benchmark_months} months ({start_month} - {benchmark_end_month})"

    # Formatting validation month (e.g., "Dec")
    validation_month_name = get_month_name(validation_month)

    # Filter 'target' for Inbound Country, removing blanks and duplicates
    inbound_country = input_data['target'].dropna().unique().tolist()

    # Filter 'country' for Outbound Country, removing blanks and duplicates
    outbound_country = input_data['country'].dropna().unique().tolist()

    # Create the overview DataFrame
    overview_data = {
        'Data Category': [data_category],
        'Inbound Country': [", ".join(inbound_country)],
        'Outbound Country': [", ".join(outbound_country)],
        'Period': [period],
        'Benchmark Months': [benchmark_period],
        'Validation Month': [validation_month_name]
    }

    # Convert to DataFrame
    overview_df = pd.DataFrame(overview_data)

    # Save as overview.csv
    overview_df.to_csv("overview.csv", index=False)

    st.success("overview.csv file has been created!")

# Function to run Jupyter Notebook
def run_notebook(uploaded_file, benchmark_months, validation_month, nodes):
    # Save the uploaded file as 'input_file.xlsx'
    with open("input_file.xlsx", "wb") as f:
        f.write(uploaded_file.getbuffer())

    # Execute the Jupyter Notebook with specific inputs
    try:
        result = subprocess.run(
            ["jupyter", "nbconvert", "--to", "notebook", "--execute", "--inplace", "Code_Input.ipynb"],
            check=True, capture_output=True, text=True
        )
        st.success("Notebook executed successfully!")

        # Load the output CSV files or process further as needed
        merged_df = pd.read_excel('merged_df.xlsx')
        st.write(merged_df)

        # Automatically terminate this Streamlit app and run the next one
        st.write("Running Tabs.py Streamlit app...")
        subprocess.Popen(["streamlit", "run", "Tabs.py"])
        st.stop()  # Stop the current Streamlit script

    except subprocess.CalledProcessError as e:
        st.error("There was an error executing the notebook.")
        st.error(e.stdout)
        st.error(e.stderr)

# Streamlit UI
st.title("Run Jupyter Notebook with Excel Input")

# File uploader
uploaded_file = st.file_uploader("Choose an Excel file", type="xlsx")

if uploaded_file is not None:
    # Load the input data to get month details
    input_data = pd.read_excel(uploaded_file)
    
    # Get the min and max months from the data
    min_month = input_data['Month'].min()
    max_month = input_data['Month'].max()
    
    # Convert numeric months to names
    available_months = [get_month_name(month) for month in range(min_month, max_month + 1)]
    
    # User input for Data Category
    data_category = st.selectbox("Select Data Category", options=["ICD", "Non-ICD"])

    # Parameters input
    benchmark_months = st.number_input(f"Enter the number of Benchmark Months (Min: {min_month}, Max: {max_month - min_month + 1})", min_value=1, max_value=max_month - min_month + 1, value=6)

    # Validation month input
    validation_month_name = st.selectbox("Select Validation Month", options=available_months)
    validation_month = available_months.index(validation_month_name) + min_month

    nodes = st.number_input("Enter the number of nodes you want in the PSI table", min_value=1, max_value=20, value=10)

    # Run notebook on button click
    if st.button("Run Notebook"):
        # Step 1: Create overview.csv before running the notebook
        create_overview(uploaded_file, benchmark_months, validation_month)
        
        # Step 2: Run the Jupyter Notebook
        run_notebook(uploaded_file, benchmark_months, validation_month, nodes)
else:
    st.error("Please upload an Excel file")
