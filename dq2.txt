import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from io import BytesIO
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
import os

# Sample dataframe creation
data = {
    'Region': ['HBAP', 'HBAP', 'HBAP', 'HBAP', 'HBAP', 'HBAP'],
    'Country': ['MNL', 'MNL', 'MNL', 'MNL', 'MNL', 'MNL'],
    'KPIs': ['TTD', 'Approved %', 'Credit STP', 'Approved with 1 to 3 Days', 'Approved within 1 to 13 Days', 'Avg Approved TAT'],
    'May-2023': [14279, 15.54, 64.45, 38.24, 24.21, 4.66],
    'Jun-2023': [14090, 17.61, 71.86, 41.88, 25.73, 4.24],
    'Jul-2023': [19707, 12.75, 70.83, 29.8, 11.87, 4.71],
    'Aug-2023': [23661, 16.42, 70.86, 12.6, 34.23, 7.61],
    'Sep-2023': [20562, 15.88, 74.83, 19.36, 9.02, 4.77],
    'Oct-2023': [25478, 18.43, 73.63, 11.93, 26.65, 6.6],
    'Nov-2023': [23285, 14.73, 84.12, 18.58, 24.22, 6.63],
    'Dec-2023': [34318, 7.44, 88.74, 11.11, 5.92, 7.87],
    'Jan-2024': [40095, 9.4, 84.96, 17.32, 6.25, 5.02],
    'Feb-2024': [42000, 10.2, 89.0, 18.0, 7.0, 5.5] # Sample data for additional month
}

df_l = pd.DataFrame(data)

# Replacing values in the 'KPIs' column
df_l['KPIs'] = df_l['KPIs'].replace({
    'ad_Approval_rate': 'Approved %',
    'ttd_CreditSTP_rate': 'Credit STP',
    'approv_5days_Approved_rate': 'Approved with 1 to 3 Days',
    'approv_t113days_Approved_rate': 'Approved within 1 to 13 Days',
    'Avg_TAT_Approved_Days': 'Avg Approved TAT'
})

# Generate trendlines for each KPI using Matplotlib
trendlines = []
for _, row in df_l.iterrows():
    months = df_l.columns[3:]  # Skip 'Region', 'Country', and 'KPIs'
    values = row[3:]  # Corresponding values for the months
    fig, ax = plt.subplots()
    ax.plot(months, values, marker='o')
    ax.set_title(f"Trend for {row['KPIs']}")
    ax.set_xlabel('Month')
    ax.set_ylabel('Values')
    trendlines.append(fig)

# Function to create PDF
def create_pdf(dataframes, charts):
    buffer = BytesIO()
    c = canvas.Canvas(buffer, pagesize=letter)
    width, height = letter

    y_position = height - 40
    
    for i, (title, df) in enumerate(dataframes.items()):
        c.setFont("Helvetica-Bold", 14)
        c.drawString(30, y_position, title)
        y_position -= 20

        # Draw the dataframe as text
        c.setFont("Helvetica", 10)
        text = df.to_string(index=False)
        for line in text.split('\n'):
            c.drawString(30, y_position, line)
            y_position -= 12

        y_position -= 20  # Space between sections

        if y_position < 100:
            c.showPage()
            y_position = height - 40

    for i, (title, chart) in enumerate(charts.items()):
        c.setFont("Helvetica-Bold", 14)
        c.drawString(30, y_position, title)
        y_position -= 20

        # Save the chart to a temporary file
        temp_image_path = f"chart_{i}.png"
        chart.savefig(temp_image_path)
        c.drawImage(temp_image_path, 30, y_position - 200, width=500, height=200)
        y_position -= 220

        if y_position < 100:
            c.showPage()
            y_position = height - 40

        # Clean up the temporary file
        os.remove(temp_image_path)

    c.save()
    buffer.seek(0)
    return buffer

def main():
    st.title("Streamlit Dashboard with Download Option")

    tabs = st.tabs(["KPI Snapshot", "Volume Management", "Time Metrics", "Operations Management", "Quality Management", "Download"])

    dataframes = {}
    charts = {}

    with tabs[0]:
        st.markdown("***KPI Snapshot***")
        st.dataframe(df_l)
        dataframes["KPI Snapshot"] = df_l

        st.markdown("***Trendlines***")
        cols = st.columns(6)  # Create 6 columns for the trendlines

        for i, fig in enumerate(trendlines):
            with cols[i % 6]:  # Use modulo to wrap around to the next row
                st.pyplot(fig)
                charts[f"Trend for {df_l['KPIs'][i]}"] = fig

    with tabs[1]:
        st.header("Volume Management")
        # Placeholder content for Volume Management tab
        st.write("Volume Management content goes here.")

    with tabs[2]:
        st.header("Time Metrics")
        # Placeholder content for Time Metrics tab
        st.write("Time Metrics content goes here.")

    with tabs[3]:
        st.header("Operations Management")
        # Placeholder content for Operations Management tab
        st.write("Operations Management content goes here.")

    with tabs[4]:
        st.header("Quality Management")
        # Placeholder content for Quality Management tab
        st.write("Quality Management content goes here.")

    with tabs[5]:
        st.header("Download Dashboard Content")

        if st.button("Download as PDF"):
            pdf_buffer = create_pdf(dataframes, charts)
            st.download_button(label="Download PDF", data=pdf_buffer, file_name="dashboard_content.pdf", mime="application/pdf")

if __name__ == "__main__":
    main()
