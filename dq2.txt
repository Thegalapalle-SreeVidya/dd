import streamlit as st
import pandas as pd
import subprocess
import os

# Function to run Jupyter Notebook
def run_notebook(uploaded_file, benchmark_months, validation_month, nodes):
    # Save the uploaded file as 'input_file.xlsx'
    with open("input_file.xlsx", "wb") as f:
        f.write(uploaded_file.getbuffer())

    # Execute the Jupyter Notebook with specific inputs
    try:
        result = subprocess.run(
            ["jupyter", "nbconvert", "--to", "notebook", "--execute", "--inplace", "Code_Input.ipynb"],
            check=True, capture_output=True, text=True
        )
        st.success("Notebook executed successfully!")
    except subprocess.CalledProcessError as e:
        st.error("There was an error executing the notebook.")
        st.error(e.stdout)
        st.error(e.stderr)

# Function to create the overview.csv file
def create_overview(input_file, data_category, benchmark_month, validation_month):
    # Load the input file as a dataframe
    df = pd.read_excel(input_file)
    
    # Extract unique values from 'target' for Inbound Country and 'country' for Outbound Country
    inbound_countries = df['target'].dropna().unique().tolist()
    outbound_countries = df['country'].dropna().unique().tolist()

    # Prepare the overview data
    data = {
        'Data Category': [data_category] * len(outbound_countries),
        'Inbound Country': inbound_countries[:len(outbound_countries)],  # Ensure matching lengths
        'Outbound Country': outbound_countries,
        'Period': ['12 months (Jan-Dec 23)'] * len(outbound_countries),
        'Benchmark Months': [benchmark_month] * len(outbound_countries),
        'Validation Month': [validation_month] * len(outbound_countries)
    }
    
    # Create a DataFrame for the overview
    overview_df = pd.DataFrame(data)
    
    # Save the overview as CSV
    overview_df.to_csv('overview.csv', index=False)
    
    # Return the DataFrame for display purposes
    return overview_df

# Streamlit UI for running the notebook and generating the overview.csv
st.title("Run Notebook with Excel Input and Generate Overview CSV")

# File uploader
uploaded_file = st.file_uploader("Choose an Excel file", type="xlsx")

# Parameters input for running the notebook
benchmark_months = st.number_input("Enter the number of Benchmark Months", min_value=1, max_value=12, value=6)
validation_month = st.number_input("Enter the month you are validating for", min_value=1, max_value=12, value=10)
nodes = st.number_input("Enter the number of nodes you want in the PSI table", min_value=1, max_value=20, value=10)

# Run notebook on button click
if st.button("Run Notebook"):
    if uploaded_file is not None:
        run_notebook(uploaded_file, benchmark_months, validation_month, nodes)
        
        # Option to proceed to the Tabs interface
        if st.button("Proceed to Tabs Interface"):
            st.write("Launching Tabs Interface...")
            # Run Tabs.py using Streamlit in the same environment
            os.system("streamlit run Tabs.py")
    else:
        st.error("Please upload an Excel file")

# Section for generating overview.csv file
st.subheader("Generate Overview CSV")

# User input for Data Category
data_category = st.selectbox("Select Data Category", options=["ICD", "Non-ICD"])

# User input for Benchmark and Validation Months
benchmark_month_input = st.text_input("Enter Benchmark Months (e.g., Jan-Nov 23)", value="Jan-Nov 23")
validation_month_input = st.text_input("Enter Validation Month (e.g., Dec 2023)", value="Dec 2023")

if uploaded_file:
    if st.button("Create Overview CSV"):
        # Generate the overview.csv file
        overview_df = create_overview(uploaded_file, data_category, benchmark_month_input, validation_month_input)
        
        # Show the dataframe as a table
        st.write("Overview Data:")
        st.dataframe(overview_df)

        # Provide a download link for the CSV file
        st.success("Overview CSV created successfully! Download below.")
        st.download_button(label="Download overview.csv", data=overview_df.to_csv(index=False), mime='text/csv')
else:
    st.info("Please upload an Excel file to generate the Overview CSV.")
